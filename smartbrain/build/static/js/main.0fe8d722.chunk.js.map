{"version":3,"sources":["components/navigation/Navigation.js","components/logo/Logo.js","components/rank/Rank.js","components/ImageLinkForm/ImageLinkForm.js","components/facerecognition/FaceRecognition.js","App.js","serviceWorker.js","index.js","components/logo/brain.png"],"names":["Navigation","style","display","justifyContent","className","Logo","options","max","height","width","paddingTop","alt","src","brain","Rank","ImageLinkForm","onInputChange","onButtonSubmit","type","onChange","onClick","FaceRecognition","imageUrl","app","Clarifai","App","apiKey","event","setState","input","target","value","imageURl","state","models","predict","then","response","console","log","outputs","data","regions","region_info","bounding_box","err","params","particles","number","density","enable","value_area","line_linked","shadow","color","links","background","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"qTAWeA,EARI,WACf,OACI,yBAAKC,MAAO,CAACC,QAAQ,OAAQC,eAAe,aACxC,uBAAGC,UAAU,2CAAb,c,2CCWGC,EAZF,WACT,OACG,yBAAKD,UAAU,WACV,kBAAC,IAAD,CAAMA,UAAU,oBAAoBE,QAAS,CAAEC,IAAM,IAAMN,MAAO,CAAEO,OAAQ,IAAKC,MAAO,MACpF,yBAAKL,UAAU,kBACX,yBAAKH,MAAO,CAACS,WAAW,OAAQC,IAAI,OAAOC,IAAKC,UCKrDC,EAbF,WACT,OACG,6BACI,yBAAKV,UAAU,MACT,kCAEN,yBAAKA,UAAU,MACT,QCUFW,G,OAhBO,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,eACnC,OACI,6BACI,uBAAGb,UAAU,MACR,uEAEL,yBAAKA,UAAU,UACX,yBAAKA,UAAU,gCACX,2BAAOA,UAAU,qBAAqBc,KAAK,OAAOC,SAAUH,IAC5D,4BAAQZ,UAAU,mDAAmDgB,QAASH,GAA9E,e,QCDLI,EARS,SAAC,GAAc,IAAbC,EAAY,EAAZA,SACtB,OACI,yBAAKlB,UAAU,UACX,yBAAKO,IAAM,SAASC,IAAKU,MCI/BC,EAAM,I,OAAIC,EAASC,KAAI,CAC3BC,OAAQ,qCAwEKD,E,kDApEb,aAAc,IAAD,8BACX,gBAMFT,cAAc,SAACW,GACb,EAAKC,SAAS,CAACC,MAAOF,EAAMG,OAAOC,SARxB,EAWbd,eAAiB,WACf,EAAKW,SAAS,CAACI,SAAU,EAAKC,MAAMJ,QACpCN,EAAIW,OAAOC,QAAQ,mCAAoC,EAAKF,MAAMJ,OAAOO,MACzE,SAASC,GACPC,QAAQC,IAAIF,EAASG,QAAQ,GAAGC,KAAKC,QAAQ,GAAGC,YAAYC,iBAE9D,SAASC,QAfT,EAAKZ,MAAQ,CACXJ,MAAO,GACPG,SAAU,IAJD,E,qDAwBX,OACE,yBAAK5B,UAAU,OACZ,kBAAC,IAAD,CACOA,UAAU,YACV0C,OAAQ,CACNC,UAAW,CACTC,OAAO,CACLjB,MAAM,IACNkB,QAAQ,CACNC,QAAO,EACPC,WAAW,MAGfC,YAAY,CACVC,OAAO,CACLH,QAAO,EACPI,MAAM,YAGZA,MAAM,CACJvB,MAAO,WAETwB,MAAM,CACJD,MAAO,aAGXhD,QAAS,CACPkD,WAAY,CACVF,MAAO,CACLvB,MAAO,cAKrB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAef,cAAiByC,KAAKzC,cAAeC,eAAkBwC,KAAKxC,iBAC3E,kBAAC,EAAD,CAAiBe,SAAUyB,KAAKxB,MAAMD,gB,GA/D5B0B,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.0fe8d722.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Navigation = () => {\n    return(\n        <nav style={{display:'flex', justifyContent:'flex-end'}}>\n            <p className='f3 link dim black underline pa3 pointer'>Sign Out</p>\n        </nav>\n    )\n}\n\nexport default Navigation","import React from 'react'\nimport Tilt from 'react-tilt'\nimport './Logo.css'\nimport brain from './brain.png'\n\nconst Logo = () => {\n    return(\n       <div className='ma4 mt0'>\n            <Tilt className=\"Tilt br2 shadow-2\" options={{ max : 60 }} style={{ height: 150, width: 150 }} >\n                <div className=\"Tilt-inner pa3\">\n                    <img style={{paddingTop:'5px'}} alt=\"logo\" src={brain}/> \n                </div>\n            </Tilt>\n       </div>\n    )\n}\n\nexport default Logo","import React from 'react'\n\nconst Rank = () => {\n    return(\n       <div>\n           <div className='f3'>\n                {'Laras, your current rank is...'}\n           </div>\n           <div className='f1'>\n                {'#5'}\n           </div>\n       </div>\n    )\n}\n\nexport default Rank","import React from 'react'\nimport './ImageLinkForm.css'\n\nconst ImageLinkForm = ({onInputChange, onButtonSubmit}) => {\n    return(\n        <div>\n            <p className='f3'>\n                {'This Magic Brain will detect faces in your pictures. Give it a try.'}\n            </p>\n            <div className='center'>\n                <div className='form center pa4 br3 shadow-5'>\n                    <input className='f4 pa2 w-70 center' type='text' onChange={onInputChange} />\n                    <button className='w-30 grow f4 link ph3 pv2 dib white bg-dark-blue' onClick={onButtonSubmit}>Detect</button>\n                </div>    \n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm","import React from 'react';\n\n\nconst FaceRecognition = ({imageUrl})=>{\n    return (\n        <div className='center'>\n            <img alt = 'people' src={imageUrl} />\n        </div>\n    );\n}\n\nexport default FaceRecognition;","import React, { Component } from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js'\nimport Navigation from './components/navigation/Navigation'\nimport Logo from './components/logo/Logo'\nimport Rank from './components/rank/Rank'\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm'\nimport Clarifai from 'clarifai'\nimport FaceRecognition from './components/facerecognition/FaceRecognition'\n\nconst app = new Clarifai.App({\n  apiKey: 'f1d28c6c50554a0aa7c391d9ebebb296'\n});\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      input: '',\n      imageURl: ''\n    }\n  }\n  onInputChange=(event)=>{\n    this.setState({input: event.target.value});\n  }\n\n  onButtonSubmit = ()=>{\n    this.setState({imageURl: this.state.input});\n    app.models.predict('a403429f2ddf4b49b307e318f00e528b', this.state.input).then(\n    function(response) {\n      console.log(response.outputs[0].data.regions[0].region_info.bounding_box)\n    },\n    function(err) {\n      // there was an error\n    }\n  );\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n         <Particles \n                className='particles'\n                params={{\n                  particles: {\n                    number:{\n                      value:120,\n                      density:{\n                        enable:true,\n                        value_area:1000\n                      }\n                    },\n                    line_linked:{\n                      shadow:{\n                        enable:true,\n                        color:'#003f5c'\n                      }\n                    },\n                  color:{\n                    value: '#003f5c'\n                  },\n                  links:{\n                    color: '#003f5c'\n                  }}\n                }}\n                options={{\n                  background: {\n                    color: {\n                      value: \"003f5c\",\n                    }\n                  }\n                }}\n              />\n        <Navigation/>\n        <Logo />\n        <Rank/>\n        <ImageLinkForm onInputChange = {this.onInputChange} onButtonSubmit = {this.onButtonSubmit}/>\n        <FaceRecognition imageURl={this.state.imageURl} /> \n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/brain.28ddcab4.png\";"],"sourceRoot":""}